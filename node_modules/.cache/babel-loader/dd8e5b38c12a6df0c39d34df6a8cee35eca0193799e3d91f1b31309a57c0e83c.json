{"ast":null,"code":"var _jsxFileName = \"/Users/jo-eun-yeong/Desktop/simplediary/src/OptimizeTest.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// const TextView = React.memo(({ text }) => {\n//   useEffect(() => {\n//     console.log(`Update :: Text : ${text}`);\n//   });\n//   return <div>{text}</div>;\n// });\n\n// const CountView = React.memo(({ count }) => {\n//   useEffect(() => {\n//     console.log(`Update :: Count : ${count}`);\n//   });\n//   return <div>{count}</div>;\n// });\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CounterA = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(_ref => {\n  _s();\n  let {\n    count\n  } = _ref;\n  useEffect(() => {\n    console.log(`CounterA Update - count : ${count}`);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: count\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 10\n  }, this);\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = CounterA;\nconst CounterB = _ref2 => {\n  _s2();\n  let {\n    obj\n  } = _ref2;\n  useEffect(() => {\n    console.log(`CounterB Update - count : ${obj.count}`);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: obj.count\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n};\n_s2(CounterB, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c3 = CounterB;\nconst areEqual = (prevProps, nextProps) => {\n  //return true //이전 프롭스와 현재 프롭스가 같다. -> 리렌더링을 일으키지 않게된다.\n  //return false //이전 프롭스와 현재 프롭스가 같지않다. -> 리렌더링을 일으킨다.\n  if (prevProps.obj.count === nextProps.obj.count) {\n    return true;\n  }\n  return false;\n};\nconst MemoizedCounterB = /*#__PURE__*/React.memo(CounterB, areEqual);\n_c4 = MemoizedCounterB;\nconst OptimizeTest = () => {\n  _s3();\n  const [count, setCount] = useState(1);\n  // const [text, setText] = useState(\"\");\n  const [obj, setObj] = useState({\n    count: 1\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 50\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Count A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterA, {\n        count: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCount(count),\n        children: \"A Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Count B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MemoizedCounterB, {\n        obj: obj\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setObj({\n          count: obj.count\n        }),\n        children: \"B Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s3(OptimizeTest, \"vZo1jgdNurzSr6DCpkoVuEAZevg=\");\n_c5 = OptimizeTest;\nexport default OptimizeTest;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"CounterA$React.memo\");\n$RefreshReg$(_c2, \"CounterA\");\n$RefreshReg$(_c3, \"CounterB\");\n$RefreshReg$(_c4, \"MemoizedCounterB\");\n$RefreshReg$(_c5, \"OptimizeTest\");","map":{"version":3,"names":["React","useEffect","useState","CounterA","memo","count","console","log","CounterB","obj","areEqual","prevProps","nextProps","MemoizedCounterB","OptimizeTest","setCount","setObj","padding"],"sources":["/Users/jo-eun-yeong/Desktop/simplediary/src/OptimizeTest.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// const TextView = React.memo(({ text }) => {\n//   useEffect(() => {\n//     console.log(`Update :: Text : ${text}`);\n//   });\n//   return <div>{text}</div>;\n// });\n\n// const CountView = React.memo(({ count }) => {\n//   useEffect(() => {\n//     console.log(`Update :: Count : ${count}`);\n//   });\n//   return <div>{count}</div>;\n// });\n\nconst CounterA = React.memo(({ count }) => {\n  useEffect(() => {\n    console.log(`CounterA Update - count : ${count}`);\n  });\n\n  return <div>{count}</div>;\n});\n\nconst CounterB = ({ obj }) => {\n  useEffect(() => {\n    console.log(`CounterB Update - count : ${obj.count}`);\n  });\n\n  return <div>{obj.count}</div>;\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  //return true //이전 프롭스와 현재 프롭스가 같다. -> 리렌더링을 일으키지 않게된다.\n  //return false //이전 프롭스와 현재 프롭스가 같지않다. -> 리렌더링을 일으킨다.\n  if (prevProps.obj.count === nextProps.obj.count) {\n    return true;\n  }\n  return false;\n};\n\nconst MemoizedCounterB = React.memo(CounterB, areEqual);\n\nconst OptimizeTest = () => {\n  const [count, setCount] = useState(1);\n  // const [text, setText] = useState(\"\");\n  const [obj, setObj] = useState({\n    count: 1,\n  });\n  return (\n    <div style={{ padding: 50 }}>\n      {/* <div>\n        <h2>count</h2>\n        <CountView count={count} />\n        <button onClick={() => setCount(count + 1)}>+</button>\n      </div>\n      <div>\n        <h2>text</h2>\n        <TextView text={text} />\n        <input value={text} onChange={(e) => setText(e.target.value)} />\n      </div> */}\n      <div>\n        <h2>Count A</h2>\n        <CounterA count={count} />\n        <button onClick={() => setCount(count)}>A Button</button>\n      </div>\n      <div>\n        <h2>Count B</h2>\n        <MemoizedCounterB obj={obj} />\n        {/* <CounterB obj={obj} /> */}\n        <button onClick={() => setObj({ count: obj.count })}>B Button</button>\n      </div>\n    </div>\n  );\n};\n\nexport default OptimizeTest;\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAElD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA,MAAMC,QAAQ,iCAAGH,KAAK,CAACI,IAAI,SAAC,QAAe;EAAA;EAAA,IAAd;IAAEC;EAAM,CAAC;EACpCJ,SAAS,CAAC,MAAM;IACdK,OAAO,CAACC,GAAG,CAAE,6BAA4BF,KAAM,EAAC,CAAC;EACnD,CAAC,CAAC;EAEF,oBAAO;IAAA,UAAMA;EAAK;IAAA;IAAA;IAAA;EAAA,QAAO;AAC3B,CAAC,kCAAC;AAAC,MANGF,QAAQ;AAQd,MAAMK,QAAQ,GAAG,SAAa;EAAA;EAAA,IAAZ;IAAEC;EAAI,CAAC;EACvBR,SAAS,CAAC,MAAM;IACdK,OAAO,CAACC,GAAG,CAAE,6BAA4BE,GAAG,CAACJ,KAAM,EAAC,CAAC;EACvD,CAAC,CAAC;EAEF,oBAAO;IAAA,UAAMI,GAAG,CAACJ;EAAK;IAAA;IAAA;IAAA;EAAA,QAAO;AAC/B,CAAC;AAAC,IANIG,QAAQ;AAAA,MAARA,QAAQ;AAQd,MAAME,QAAQ,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;EACzC;EACA;EACA,IAAID,SAAS,CAACF,GAAG,CAACJ,KAAK,KAAKO,SAAS,CAACH,GAAG,CAACJ,KAAK,EAAE;IAC/C,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd,CAAC;AAED,MAAMQ,gBAAgB,gBAAGb,KAAK,CAACI,IAAI,CAACI,QAAQ,EAAEE,QAAQ,CAAC;AAAC,MAAlDG,gBAAgB;AAEtB,MAAMC,YAAY,GAAG,MAAM;EAAA;EACzB,MAAM,CAACT,KAAK,EAAEU,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACrC;EACA,MAAM,CAACO,GAAG,EAAEO,MAAM,CAAC,GAAGd,QAAQ,CAAC;IAC7BG,KAAK,EAAE;EACT,CAAC,CAAC;EACF,oBACE;IAAK,KAAK,EAAE;MAAEY,OAAO,EAAE;IAAG,CAAE;IAAA,wBAW1B;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB,eAChB,QAAC,QAAQ;QAAC,KAAK,EAAEZ;MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,eAC1B;QAAQ,OAAO,EAAE,MAAMU,QAAQ,CAACV,KAAK,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB;IAAA;MAAA;MAAA;MAAA;IAAA,QACrD,eACN;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB,eAChB,QAAC,gBAAgB;QAAC,GAAG,EAAEI;MAAI;QAAA;QAAA;QAAA;MAAA,QAAG,eAE9B;QAAQ,OAAO,EAAE,MAAMO,MAAM,CAAC;UAAEX,KAAK,EAAEI,GAAG,CAACJ;QAAM,CAAC,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB;IAAA;MAAA;MAAA;MAAA;IAAA,QAClE;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,IA/BIS,YAAY;AAAA,MAAZA,YAAY;AAiClB,eAAeA,YAAY;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}